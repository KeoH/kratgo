package cache

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Entry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Response":
			err = z.Response.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Response")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Entry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Response"
	err = en.Append(0x81, 0xa8, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	if err != nil {
		return
	}
	err = z.Response.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Response")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Entry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Response"
	o = append(o, 0x81, 0xa8, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65)
	o, err = z.Response.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Response")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Response":
			bts, err = z.Response.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Response")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Entry) Msgsize() (s int) {
	s = 1 + 9 + z.Response.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Response) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0005 uint32
	zb0005, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Response, zb0005)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0005 > 0 {
		zb0005--
		var zb0001 string
		var zb0002 struct {
			Body    []byte
			Headers ResponseHeaders
		}
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var field []byte
		_ = field
		var zb0006 uint32
		zb0006, err = dc.ReadMapHeader()
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0006 > 0 {
			zb0006--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "Body":
				zb0002.Body, err = dc.ReadBytes(zb0002.Body)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Body")
					return
				}
			case "Headers":
				var zb0007 uint32
				zb0007, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Headers")
					return
				}
				if zb0002.Headers == nil {
					zb0002.Headers = make(ResponseHeaders, zb0007)
				} else if len(zb0002.Headers) > 0 {
					for key := range zb0002.Headers {
						delete(zb0002.Headers, key)
					}
				}
				for zb0007 > 0 {
					zb0007--
					var zb0003 string
					var zb0004 []byte
					zb0003, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Headers")
						return
					}
					zb0004, err = dc.ReadBytes(zb0004)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Headers", zb0003)
						return
					}
					zb0002.Headers[zb0003] = zb0004
				}
			default:
				err = dc.Skip()
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Response) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0008, zb0009 := range z {
		err = en.WriteString(zb0008)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		// map header, size 2
		// write "Body"
		err = en.Append(0x82, 0xa4, 0x42, 0x6f, 0x64, 0x79)
		if err != nil {
			return
		}
		err = en.WriteBytes(zb0009.Body)
		if err != nil {
			err = msgp.WrapError(err, zb0008, "Body")
			return
		}
		// write "Headers"
		err = en.Append(0xa7, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(zb0009.Headers)))
		if err != nil {
			err = msgp.WrapError(err, zb0008, "Headers")
			return
		}
		for zb0010, zb0011 := range zb0009.Headers {
			err = en.WriteString(zb0010)
			if err != nil {
				err = msgp.WrapError(err, zb0008, "Headers")
				return
			}
			err = en.WriteBytes(zb0011)
			if err != nil {
				err = msgp.WrapError(err, zb0008, "Headers", zb0010)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Response) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0008, zb0009 := range z {
		o = msgp.AppendString(o, zb0008)
		// map header, size 2
		// string "Body"
		o = append(o, 0x82, 0xa4, 0x42, 0x6f, 0x64, 0x79)
		o = msgp.AppendBytes(o, zb0009.Body)
		// string "Headers"
		o = append(o, 0xa7, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73)
		o = msgp.AppendMapHeader(o, uint32(len(zb0009.Headers)))
		for zb0010, zb0011 := range zb0009.Headers {
			o = msgp.AppendString(o, zb0010)
			o = msgp.AppendBytes(o, zb0011)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Response) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0005 uint32
	zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(Response, zb0005)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0005 > 0 {
		var zb0001 string
		var zb0002 struct {
			Body    []byte
			Headers ResponseHeaders
		}
		zb0005--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var field []byte
		_ = field
		var zb0006 uint32
		zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		for zb0006 > 0 {
			zb0006--
			field, bts, err = msgp.ReadMapKeyZC(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			switch msgp.UnsafeString(field) {
			case "Body":
				zb0002.Body, bts, err = msgp.ReadBytesBytes(bts, zb0002.Body)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Body")
					return
				}
			case "Headers":
				var zb0007 uint32
				zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, "Headers")
					return
				}
				if zb0002.Headers == nil {
					zb0002.Headers = make(ResponseHeaders, zb0007)
				} else if len(zb0002.Headers) > 0 {
					for key := range zb0002.Headers {
						delete(zb0002.Headers, key)
					}
				}
				for zb0007 > 0 {
					var zb0003 string
					var zb0004 []byte
					zb0007--
					zb0003, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Headers")
						return
					}
					zb0004, bts, err = msgp.ReadBytesBytes(bts, zb0004)
					if err != nil {
						err = msgp.WrapError(err, zb0001, "Headers", zb0003)
						return
					}
					zb0002.Headers[zb0003] = zb0004
				}
			default:
				bts, err = msgp.Skip(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001)
					return
				}
			}
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Response) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0008, zb0009 := range z {
			_ = zb0009
			s += msgp.StringPrefixSize + len(zb0008) + 1 + 5 + msgp.BytesPrefixSize + len(zb0009.Body) + 8 + msgp.MapHeaderSize
			if zb0009.Headers != nil {
				for zb0010, zb0011 := range zb0009.Headers {
					_ = zb0011
					s += msgp.StringPrefixSize + len(zb0010) + msgp.BytesPrefixSize + len(zb0011)
				}
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ResponseHeaders) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0003 uint32
	zb0003, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ResponseHeaders, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		zb0003--
		var zb0001 string
		var zb0002 []byte
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, err = dc.ReadBytes(zb0002)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ResponseHeaders) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteMapHeader(uint32(len(z)))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0004, zb0005 := range z {
		err = en.WriteString(zb0004)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		err = en.WriteBytes(zb0005)
		if err != nil {
			err = msgp.WrapError(err, zb0004)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ResponseHeaders) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for zb0004, zb0005 := range z {
		o = msgp.AppendString(o, zb0004)
		o = msgp.AppendBytes(o, zb0005)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ResponseHeaders) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0003 uint32
	zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(ResponseHeaders, zb0003)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0003 > 0 {
		var zb0001 string
		var zb0002 []byte
		zb0003--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		zb0002, bts, err = msgp.ReadBytesBytes(bts, zb0002)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ResponseHeaders) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0004, zb0005 := range z {
			_ = zb0005
			s += msgp.StringPrefixSize + len(zb0004) + msgp.BytesPrefixSize + len(zb0005)
		}
	}
	return
}
